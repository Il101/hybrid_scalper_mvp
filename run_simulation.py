#!/usr/bin/env python3
"""
–£–¥–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_simulation.py                       # –ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è BTCUSDT, 5m, 50 —à–∞–≥–æ–≤
    python run_simulation.py --symbol ETHUSDT      # –°–∏–º—É–ª—è—Ü–∏—è ETHUSDT
    python run_simulation.py --steps 100           # 100 —à–∞–≥–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
    python run_simulation.py --slow                # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API
    python run_simulation.py --timeframe 1m        # 1-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
"""

import argparse
import subprocess
import sys
from backtest.sim_loop import run_simulation

def main():
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥-–±–æ—Ç–∞')
    
    parser.add_argument('--symbol', default='SOLUSDT', 
                        help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: BTCUSDT)')
    parser.add_argument('--timeframe', default='5m', 
                        help='–¢–∞–π–º—Ñ—Ä–µ–π–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5m)')
    parser.add_argument('--steps', type=int, default=0, 
                        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ (0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)')
    parser.add_argument('--use-ws', action='store_true', 
                        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –¥–ª—è –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--use-ws-prices', action='store_true',
                        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –¥–ª—è —Ü–µ–Ω (—Å REST fallback)')
    parser.add_argument('--slow', action='store_true', 
                        help='–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏')
    parser.add_argument('--preset', type=str, default=None,
                        help='–ò–º—è –ø—Ä–µ—Å–µ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: fast, live-sol, debug)')
    parser.add_argument('--list-presets', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã')
    parser.add_argument('--rotate-logs', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º')

    # Make slow mode and WS (including WS prices) the default behavior
    parser.set_defaults(use_ws=True, use_ws_prices=True, slow=True)
    
    args = parser.parse_args()

    # Presets
    PRESETS = {
        'fast': {'symbol': 'SOLUSDT', 'timeframe': '5m', 'steps': 50, 'use_ws': False, 'use_ws_prices': False, 'slow': False},
        'live-sol': {'symbol': 'SOLUSDT', 'timeframe': '5m', 'steps': 0, 'use_ws': True, 'use_ws_prices': True, 'slow': True},
        'live-batch': {'symbol': 'BTCUSDT', 'timeframe': '1m', 'steps': 0, 'use_ws': True, 'use_ws_prices': False, 'slow': True},
        'debug': {'symbol': 'ETHUSDT', 'timeframe': '1m', 'steps': 10, 'use_ws': False, 'use_ws_prices': False, 'slow': False}
    }

    if args.list_presets:
        print("Available presets:")
        for k, v in PRESETS.items():
            print(f"  {k}: {v}")
        return

    # Apply preset if provided and individual args not overridden
    if args.preset:
        p = PRESETS.get(args.preset)
        if not p:
            print(f"Unknown preset '{args.preset}'. Use --list-presets to see available options.")
            return
        # Apply fields only if user didn't explicitly set them (i.e., they are default)
        if args.symbol == parser.get_default('symbol') and 'symbol' in p:
            args.symbol = p['symbol']
        if args.timeframe == parser.get_default('timeframe') and 'timeframe' in p:
            args.timeframe = p['timeframe']
        if args.steps == parser.get_default('steps') and 'steps' in p:
            args.steps = p['steps']
        if not args.use_ws and p.get('use_ws'):
            args.use_ws = p['use_ws']
        if not args.use_ws_prices and p.get('use_ws_prices'):
            args.use_ws_prices = p['use_ws_prices']
        if not args.slow and p.get('slow'):
            args.slow = p['slow']
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º, --slow –≤–∫–ª—é—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–π
    fast_mode = not args.slow
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏:")
    print(f"   –°–∏–º–≤–æ–ª: {args.symbol}")
    print(f"   –¢–∞–π–º—Ñ—Ä–µ–π–º: {args.timeframe}")
    print(f"   –®–∞–≥–æ–≤: {'–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ' if args.steps == 0 else args.steps}")
    print(f"   –†–µ–∂–∏–º: {'–ë—ã—Å—Ç—Ä—ã–π (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)' if fast_mode else '–ú–µ–¥–ª–µ–Ω–Ω—ã–π (—Ä–µ–∞–ª—å–Ω—ã–µ API)'}")
    print(f"   WebSocket: {'–î–∞' if args.use_ws else '–ù–µ—Ç'}")
    print(f"   WS –¶–µ–Ω—ã: {'–î–∞' if args.use_ws_prices else '–ù–µ—Ç'}")
    print("-" * 50)
    
    try:
        # Optional: rotate logs before starting the simulation
        if args.rotate_logs:
            try:
                print('üîÑ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤: –∑–∞–ø—É—Å–∫ scripts/rotate_logs.py')
                subprocess.run([sys.executable, 'scripts/rotate_logs.py'], check=True)
                print('üîÑ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            except Exception as e:
                print(f'‚ö†Ô∏è –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}')

        result = run_simulation(
            symbol=args.symbol,
            timeframe=args.timeframe,
            steps=args.steps,
            use_ws=args.use_ws,
            use_ws_prices=args.use_ws_prices,
            fast_mode=fast_mode
        )
        
        print("-" * 50)
        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.get('cash_final', 'N/A')}")
        print(f"   –õ–æ–≥ —Å–¥–µ–ª–æ–∫: {result.get('log_path', 'N/A')}")
        print(f"\nüìä –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥:")
        print(f"   streamlit run dashboards/streamlit_app.py --server.port 8503")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
