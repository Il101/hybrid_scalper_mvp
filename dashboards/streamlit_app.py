import os
import sys
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime, timedelta

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def simple_kpis_from_trades(trades_df):
    """Simple KPI calculation from trades DataFrame"""
    if len(trades_df) == 0:
        return {
            'trades': 0,
            'win_rate': 0,
            'profit_factor': 0,
            'pnl_total': 0
        }
    
    # Only count closed trades
    closed_trades = trades_df[trades_df['action'] == 'CLOSE']
    
    if len(closed_trades) == 0:
        return {
            'trades': 0,
            'win_rate': 0,
            'profit_factor': 0,
            'pnl_total': 0
        }
    
    total_pnl = closed_trades['pnl_usd'].sum()
    winning_trades = len(closed_trades[closed_trades['pnl_usd'] > 0])
    losing_trades = len(closed_trades[closed_trades['pnl_usd'] < 0])
    total_trades = len(closed_trades)
    
    win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
    
    gross_profit = closed_trades[closed_trades['pnl_usd'] > 0]['pnl_usd'].sum()
    gross_loss = abs(closed_trades[closed_trades['pnl_usd'] < 0]['pnl_usd'].sum())
    profit_factor = (gross_profit / gross_loss) if gross_loss > 0 else float('inf') if gross_profit > 0 else 0
    
    return {
        'trades': total_trades,
        'win_rate': win_rate,
        'profit_factor': profit_factor,
        'pnl_total': total_pnl
    }

def simple_equity_curve(trades_df):
    """Simple equity curve calculation"""
    if len(trades_df) == 0:
        return pd.DataFrame()
    
    # Sort by timestamp
    trades_sorted = trades_df.sort_values('ts')
    trades_sorted['cumulative_pnl'] = trades_sorted['pnl_usd'].cumsum()
    trades_sorted['equity'] = 10000 + trades_sorted['cumulative_pnl']  # Starting with 10k
    
    return trades_sorted[['ts', 'equity']]

st.set_page_config(page_title="ü§ñ Enhanced Scalper Dashboard", layout="wide")

st.title("‚ö° Enhanced Scalper Trading Dashboard")
st.markdown("---")

# File paths
trades_path = st.sidebar.text_input("üìÅ –ü—É—Ç—å –∫ –ª–æ–≥—É —Å–¥–µ–ª–æ–∫", "logs/trades.csv")
signals_path = st.sidebar.text_input("üì° –ü—É—Ç—å –∫ –ª–æ–≥—É —Å–∏–≥–Ω–∞–ª–æ–≤", "logs/signals.csv")

# Refresh button
if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.rerun()

# Check if files exist
trades_exist = os.path.exists(trades_path)
signals_exist = os.path.exists(signals_path)

# === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò ===
st.header("üìä –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

if trades_exist:
    df_trades = pd.read_csv(trades_path)
    k = simple_kpis_from_trades(df_trades)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3, col4, col5 = st.columns(5)
    col1.metric("üí∞ –û–±—â–∏–π PnL", f"${k['pnl_total']:.2f}")
    col2.metric("üìà –°–¥–µ–ª–æ–∫ –∑–∞–∫—Ä—ã—Ç–æ", f"{k['trades']}")
    col3.metric("üéØ Win Rate", f"{k['win_rate']:.1f}%")
    col4.metric("‚ö° Profit Factor", f"{k['profit_factor']:.2f}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if len(df_trades) > 0:
        last_equity = df_trades['equity'].iloc[-1] if 'equity' in df_trades.columns else 10000
        col5.metric("üíº –¢–µ–∫—É—â–∏–π Equity", f"${last_equity:.2f}")
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ—Ç—Ä–∏–∫
        col6, col7, col8, col9, col10 = st.columns(5)
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö/—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        profitable_trades = df_trades[df_trades['pnl_usd'] > 0] if 'pnl_usd' in df_trades.columns else pd.DataFrame()
        losing_trades = df_trades[df_trades['pnl_usd'] < 0] if 'pnl_usd' in df_trades.columns else pd.DataFrame()
        
        avg_win = profitable_trades['pnl_usd'].mean() if len(profitable_trades) > 0 else 0
        avg_loss = abs(losing_trades['pnl_usd'].mean()) if len(losing_trades) > 0 else 0
        
        col6.metric("üíö –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", f"${avg_win:.2f}")
        col7.metric("‚ùå –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫", f"${avg_loss:.2f}")
        col8.metric("üî• –í—ã–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥", "0")  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        col9.metric("‚ùÑÔ∏è –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥", "0")  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if 'pnl_usd' in df_trades.columns:
            max_win = df_trades['pnl_usd'].max()
            max_loss = df_trades['pnl_usd'].min()
            col10.metric("üöÄ –ú–∞–∫—Å –ø—Ä–∏–±—ã–ª—å", f"${max_win:.2f}")
else:
    st.warning("‚ö†Ô∏è –§–∞–π–ª trades.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    st.stop()

st.markdown("---")

# === –ì–†–ê–§–ò–ö–ò ===
col_left, col_right = st.columns(2)

with col_left:
    st.subheader("üìà Equity Curve")
    eq = simple_equity_curve(df_trades)
    if not eq.empty:
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(eq["ts"], eq["equity"], linewidth=2, color='#1f77b4')
        ax.fill_between(eq["ts"], eq["equity"], alpha=0.3, color='#1f77b4')
        ax.set_xlabel("–í—Ä–µ–º—è")
        ax.set_ylabel("Equity ($)")
        ax.set_title("–†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞")
        ax.grid(True, alpha=0.3)
        st.pyplot(fig)
        
        # Drawdown analysis
        equity_values = eq["equity"].values
        running_max = np.maximum.accumulate(np.array(equity_values))
        drawdown = (np.array(equity_values) - running_max) / running_max * 100
        max_dd = np.min(drawdown)
        st.metric("üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞", f"{max_dd:.2f}%")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ equity.")

with col_right:
    st.subheader("üíπ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL")
    if 'pnl_usd' in df_trades.columns and len(df_trades) > 0:
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ PnL
        profits = df_trades[df_trades['pnl_usd'] > 0]['pnl_usd']
        losses = df_trades[df_trades['pnl_usd'] < 0]['pnl_usd']
        
        ax.hist(profits, bins=20, alpha=0.7, color='green', label=f'–ü—Ä–∏–±—ã–ª–∏ ({len(profits)})')
        ax.hist(losses, bins=20, alpha=0.7, color='red', label=f'–£–±—ã—Ç–∫–∏ ({len(losses)})')
        ax.set_xlabel("PnL ($)")
        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫")
        ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–¥–µ–ª–æ–∫")
        ax.legend()
        ax.grid(True, alpha=0.3)
        st.pyplot(fig)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö PnL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

st.markdown("---")

# === –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° –¢–û–†–ì–û–í–õ–ò ===
st.header("üéØ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")

col_status1, col_status2, col_status3 = st.columns(3)

with col_status1:
    st.subheader("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
    if len(df_trades) > 0:
        recent_trades = df_trades.tail(5).copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
        def color_pnl(val):
            if pd.isna(val):
                return ''
            color = 'green' if val > 0 else 'red' if val < 0 else 'gray'
            return f'color: {color}'
        
        if 'pnl_usd' in recent_trades.columns:
            styled_trades = recent_trades[['ts', 'side', 'action', 'price', 'pnl_usd']].style.map(
                color_pnl, subset=['pnl_usd']
            )
            st.dataframe(styled_trades, width="stretch")
        else:
            st.dataframe(recent_trades[['ts', 'side', 'action', 'price']], width="stretch")

with col_status2:
    st.subheader("‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
    if 'symbol' in df_trades.columns:
        symbol_stats = df_trades.groupby('symbol').agg({
            'pnl_usd': ['count', 'sum'] if 'pnl_usd' in df_trades.columns else 'count'
        }).round(2)
        
        if isinstance(symbol_stats.columns, pd.MultiIndex):
            symbol_stats.columns = ['–°–¥–µ–ª–∫–∏', 'PnL']
        else:
            symbol_stats.columns = ['–°–¥–µ–ª–∫–∏']
        
        st.dataframe(symbol_stats, width="stretch")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª–∞–º")

with col_status3:
    st.subheader("ÔøΩ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    if len(df_trades) > 0 and 'ts' in df_trades.columns:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ datetime –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            df_trades['datetime'] = pd.to_datetime(df_trades['ts'])
            df_trades['hour'] = df_trades['datetime'].dt.hour
            
            hourly_activity = df_trades.groupby('hour').size()
            
            fig, ax = plt.subplots(figsize=(8, 4))
            ax.bar(hourly_activity.index.values, np.array(hourly_activity.values), color='skyblue')
            ax.set_xlabel("–ß–∞—Å –¥–Ω—è")
            ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫")
            ax.set_title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º")
            st.pyplot(fig)
        except:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

st.markdown("---")

# === –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –†–ï–®–ï–ù–ò–ô ===
st.header("üß† –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π")

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤
col_analysis1, col_analysis2 = st.columns(2)

with col_analysis1:
    st.subheader("üìù –ü—Ä–∏—á–∏–Ω—ã —Å–¥–µ–ª–æ–∫")
    if 'reason' in df_trades.columns:
        reason_counts = df_trades['reason'].value_counts()
        
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.pie(np.array(reason_counts.values), labels=list(reason_counts.index), autopct='%1.1f%%')
        ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω —Å–¥–µ–ª–æ–∫")
        st.pyplot(fig)
        
        # –¢–∞–±–ª–∏—á–∫–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        reason_detailed = df_trades.groupby('reason').agg({
            'pnl_usd': ['count', 'sum', 'mean'] if 'pnl_usd' in df_trades.columns else 'count'
        }).round(2)
        
        if isinstance(reason_detailed.columns, pd.MultiIndex):
            reason_detailed.columns = ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–û–±—â–∏–π PnL', '–°—Ä–µ–¥–Ω–∏–π PnL']
        
        st.dataframe(reason_detailed, width="stretch")

with col_analysis2:
    st.subheader("‚öñÔ∏è Long vs Short")
    if 'side' in df_trades.columns:
        side_analysis = df_trades.groupby('side').agg({
            'pnl_usd': ['count', 'sum', 'mean'] if 'pnl_usd' in df_trades.columns else 'count'
        }).round(2)
        
        if isinstance(side_analysis.columns, pd.MultiIndex):
            side_analysis.columns = ['–°–¥–µ–ª–∫–∏', '–û–±—â–∏–π PnL', '–°—Ä–µ–¥–Ω–∏–π PnL']
        
        st.dataframe(side_analysis, width="stretch")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if 'pnl_usd' in df_trades.columns:
            fig, ax = plt.subplots(figsize=(8, 6))
            
            long_pnl = df_trades[df_trades['side'] == 'long']['pnl_usd'].dropna()
            short_pnl = df_trades[df_trades['side'] == 'short']['pnl_usd'].dropna()
            
            ax.hist(long_pnl, alpha=0.7, label=f'Long ({len(long_pnl)})', color='green', bins=15)
            ax.hist(short_pnl, alpha=0.7, label=f'Short ({len(short_pnl)})', color='red', bins=15)
            ax.set_xlabel("PnL ($)")
            ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            ax.set_title("Long vs Short —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            ax.legend()
            st.pyplot(fig)

st.markdown("---")

# === –î–ï–¢–ê–õ–¨–ù–´–ï –¢–ê–ë–õ–ò–¶–´ ===
st.header("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

tab1, tab2, tab3 = st.tabs(["üßæ –í—Å–µ —Å–¥–µ–ª–∫–∏", "üì° –°–∏–≥–Ω–∞–ª—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

with tab1:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫")
    if len(df_trades) > 0:
        # –§–∏–ª—å—Ç—Ä—ã
        col_filter1, col_filter2, col_filter3 = st.columns(3)
        
        with col_filter1:
            if 'side' in df_trades.columns:
                side_filter = st.selectbox("–¢–∏–ø —Å–¥–µ–ª–∫–∏:", ['–í—Å–µ'] + list(df_trades['side'].unique()))
            else:
                side_filter = '–í—Å–µ'
                
        with col_filter2:
            if 'symbol' in df_trades.columns:
                symbol_filter = st.selectbox("–°–∏–º–≤–æ–ª:", ['–í—Å–µ'] + list(df_trades['symbol'].unique()))
            else:
                symbol_filter = '–í—Å–µ'
                
        with col_filter3:
            show_rows = st.selectbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫:", [20, 50, 100, '–í—Å–µ'], index=0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_trades = df_trades.copy()
        if side_filter != '–í—Å–µ' and 'side' in df_trades.columns:
            filtered_trades = filtered_trades[filtered_trades['side'] == side_filter]
        if symbol_filter != '–í—Å–µ' and 'symbol' in df_trades.columns:
            filtered_trades = filtered_trades[filtered_trades['symbol'] == symbol_filter]
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        if show_rows != '–í—Å–µ':
            filtered_trades = filtered_trades.head(int(show_rows))
            
        st.dataframe(
            filtered_trades.sort_values('ts', ascending=False) if 'ts' in filtered_trades.columns else filtered_trades,
            width="stretch",
            height=400
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        csv = filtered_trades.to_csv(index=False)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            data=csv,
            file_name=f"trades_filtered_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime='text/csv'
        )

with tab2:
    st.subheader("–°–∏–≥–Ω–∞–ª—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    if signals_exist:
        try:
            # Handle mixed CSV formats (old vs new columns) by using error_bad_lines=False
            df_signals = pd.read_csv(signals_path, on_bad_lines='skip')
            
            # Show column info for debugging
            st.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤. –ö–æ–ª–æ–Ω–∫–∏: {', '.join(df_signals.columns.tolist())}")
            
            # Display recent signals
            display_signals = df_signals.sort_values('ts', ascending=False).head(100) if 'ts' in df_signals.columns else df_signals.head(100)
            st.dataframe(
                display_signals,
                width="stretch",
                height=400
            )
            
            # Show summary stats if we have score column
            if 'score' in df_signals.columns:
                col_sig1, col_sig2, col_sig3 = st.columns(3)
                with col_sig1:
                    avg_score = df_signals['score'].mean()
                    st.metric("üìà –°—Ä–µ–¥–Ω–∏–π —Å—á—ë—Ç", f"{avg_score:.1f}")
                with col_sig2:
                    if 'direction' in df_signals.columns:
                        long_signals = len(df_signals[df_signals['direction'] == 'long'])
                        short_signals = len(df_signals[df_signals['direction'] == 'short'])
                        st.metric("üìä Long/Short", f"{long_signals}/{short_signals}")
                with col_sig3:
                    if 'ob_source' in df_signals.columns:
                        ws_count = len(df_signals[df_signals['ob_source'] == 'ws'])
                        rest_count = len(df_signals[df_signals['ob_source'] == 'rest'])
                        st.metric("üåê WS/REST OB", f"{ws_count}/{rest_count}")
                        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            st.markdown("**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**")
            st.markdown("- –°–º–µ—à–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã CSV (—Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏)")
            st.markdown("- –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ")
            st.markdown("- –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            # Show the problematic area
            if "line" in str(e):
                st.code(f"–û—à–∏–±–∫–∞: {e}")
                st.markdown("**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**")
                st.code("# –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –∑–∞–Ω–æ–≤–æ\nrm logs/signals.csv\npython run_simulation.py --steps 10")
    else:
        st.info("üì° –§–∞–π–ª —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.")
        st.markdown("**–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∏–≥–Ω–∞–ª—ã?**")
        st.markdown("- –°–∏–≥–Ω–∞–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—Å–µ —Ä–∞—Å—á—ë—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        st.markdown("- –í–∫–ª—é—á–∞—é—Ç –æ—Ü–µ–Ω–∫–∏ TA, –Ω–æ–≤–æ—Å—Ç–µ–π, smart money")
        st.markdown("- –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–æ–≤ –∏ –≤—ã—Ö–æ–¥–æ–≤")

with tab3:
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞")
    st.markdown("**–ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º:**")
    st.code(f"–°–¥–µ–ª–∫–∏: {trades_path}")
    st.code(f"–°–∏–≥–Ω–∞–ª—ã: {signals_path}")
    
    st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤:**")
    if trades_exist:
        trades_size = os.path.getsize(trades_path)
        st.success(f"‚úÖ –§–∞–π–ª —Å–¥–µ–ª–æ–∫: {trades_size} –±–∞–π—Ç")
    else:
        st.error("‚ùå –§–∞–π–ª —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    if signals_exist:
        signals_size = os.path.getsize(signals_path)
        st.success(f"‚úÖ –§–∞–π–ª —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_size} –±–∞–π—Ç")
    else:
        st.warning("‚ö†Ô∏è –§–∞–π–ª —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    st.markdown("---")
    st.markdown("**üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏:**")
    st.code("python -m backtest.sim_loop")
    st.markdown("**üåê –î–ª—è –∑–∞–ø—É—Å–∫–∞ API:**")
    st.code("uvicorn app:app --reload")

# === FOOTER ===
st.markdown("---")
st.markdown("**‚ö° Enhanced Scalper Dashboard** | –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

st.markdown("---")
