#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ hybrid_scalper_mvp
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
"""

import argparse
import subprocess
import sys
import os
from pathlib import Path
import time

def install_test_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "test_requirements.txt"
        ], check=True, capture_output=True, text=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        return False
    
    return True

def run_tests(test_type='all', verbose=False, coverage=False, parallel=False):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    
    cmd = [sys.executable, "-m", "pytest"]
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
    if verbose:
        cmd.append("-v")
    else:
        cmd.append("-q")
    
    # –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
    if coverage:
        cmd.extend(["--cov=features", "--cov=backtest", "--cov=exec", "--cov=ingest"])
        cmd.append("--cov-report=html")
        cmd.append("--cov-report=term-missing")
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if parallel:
        cmd.extend(["-n", "auto"])
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
    if test_type == 'unit':
        cmd.extend(["-m", "unit"])
    elif test_type == 'integration':
        cmd.extend(["-m", "integration"])
    elif test_type == 'performance':
        cmd.extend(["-m", "performance"])
    elif test_type == 'robustness':
        cmd.extend(["-m", "robustness"])
    elif test_type == 'fast':
        cmd.extend(["-m", "not slow"])
    elif test_type == 'slow':
        cmd.extend(["-m", "slow"])
    elif test_type == 'no-api':
        cmd.extend(["-m", "not api"])
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–µ—Å—Ç–∞–º–∏
    cmd.append("tests/")
    
    print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {' '.join(cmd)}")
    
    start_time = time.time()
    
    try:
        result = subprocess.run(cmd, check=False)
        end_time = time.time()
        
        execution_time = end_time - start_time
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ (–∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {result.returncode})")
        
        return result.returncode == 0
        
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def run_specific_test_file(test_file, verbose=False):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–æ–≤"""
    
    test_path = Path("tests") / test_file
    
    if not test_path.exists():
        print(f"‚ùå –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ {test_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    cmd = [sys.executable, "-m", "pytest"]
    
    if verbose:
        cmd.append("-v")
    
    cmd.append(str(test_path))
    
    print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {test_file}")
    
    try:
        result = subprocess.run(cmd, check=False)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def run_test_discovery():
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...")
    
    cmd = [sys.executable, "-m", "pytest", "--collect-only", "-q", "tests/"]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        print(result.stdout)
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Å—Ç–æ–≤
        lines = result.stdout.split('\n')
        test_count = sum(1 for line in lines if '::test_' in line)
        print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {test_count}")
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∞—Ö"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    
    cmd = [
        sys.executable, "-m", "pytest",
        "--cov=features", "--cov=backtest", "--cov=exec", "--cov=ingest",
        "--cov-report=html",
        "--cov-report=term-missing",
        "--html=tests/reports/test_report.html",
        "--self-contained-html",
        "tests/"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    os.makedirs("tests/reports", exist_ok=True)
    
    try:
        result = subprocess.run(cmd, check=False)
        
        if result.returncode == 0:
            print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üìÅ HTML –æ—Ç—á–µ—Ç: tests/reports/test_report.html")
            print("üìÅ –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: htmlcov/index.html")
        else:
            print(f"‚ö†Ô∏è  –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: {result.returncode})")
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è hybrid_scalper_mvp')
    
    parser.add_argument('--type', choices=['all', 'unit', 'integration', 'performance', 'robustness', 'fast', 'slow', 'no-api'],
                        default='all', help='–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--file', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤')
    parser.add_argument('--install-deps', action='store_true', help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤')
    parser.add_argument('--discover', action='store_true', help='–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--report', action='store_true', help='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
    parser.add_argument('-v', '--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--coverage', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞')
    parser.add_argument('--parallel', action='store_true', help='–ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ')
    
    args = parser.parse_args()
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ hybrid_scalper_mvp")
    print("=" * 50)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if args.install_deps:
        if not install_test_dependencies():
            return 1
    
    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    if args.discover:
        if not run_test_discovery():
            return 1
        return 0
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if args.report:
        if not generate_test_report():
            return 1
        return 0
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if args.file:
        success = run_specific_test_file(args.file, args.verbose)
        return 0 if success else 1
    
    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = run_tests(
        test_type=args.type,
        verbose=args.verbose,
        coverage=args.coverage,
        parallel=args.parallel
    )
    
    return 0 if success else 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
