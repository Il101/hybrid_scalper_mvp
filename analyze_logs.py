#!/usr/bin/env python3
import pandas as pd
import numpy as np
from datetime import datetime

# –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫
try:
    trades = pd.read_csv('logs/trades.csv')
    print('üìä –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö (trades.csv)')
    print('=' * 50)
    print(f'–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}')
    
    if len(trades) > 0:
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        trades['ts'] = pd.to_datetime(trades['ts'])
        start_time = trades['ts'].min()
        end_time = trades['ts'].max()
        duration = end_time - start_time
        print(f'–ü–µ—Ä–∏–æ–¥ —Ç–æ—Ä–≥–æ–≤–ª–∏: {start_time} - {end_time}')
        print(f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}')
        
        # –°–∏–º–≤–æ–ª—ã
        symbols = trades['symbol'].value_counts()
        print(f'–¢–æ—Ä–≥—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {dict(symbols)}')
        
        # –°—Ç–æ—Ä–æ–Ω—ã —Å–¥–µ–ª–æ–∫
        sides = trades['side'].value_counts()
        print(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {dict(sides)}')
        
        # –ü—Ä–∏—á–∏–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è/–¥–µ–π—Å—Ç–≤–∏–π
        if 'action' in trades.columns:
            actions = trades['action'].value_counts().head(10)
            print(f'–¢–æ–ø –ø—Ä–∏—á–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π: {dict(actions)}')
        
        if 'reason' in trades.columns:
            reasons = trades['reason'].value_counts().head(10)
            print(f'–¢–æ–ø –ø—Ä–∏—á–∏–Ω—ã: {dict(reasons)}')
        
        # PnL –∞–Ω–∞–ª–∏–∑
        if 'pnl_usd' in trades.columns:
            total_pnl = trades['pnl_usd'].sum()
            winning_trades = trades[trades['pnl_usd'] > 0]
            losing_trades = trades[trades['pnl_usd'] < 0]
            
            print(f'–û–±—â–∏–π PnL: ${total_pnl:.2f}')
            print(f'–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(winning_trades)} (—Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à: ${winning_trades["pnl_usd"].mean():.2f})')
            print(f'–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(losing_trades)} (—Å—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${losing_trades["pnl_usd"].mean():.2f})')
            
            if 'equity' in trades.columns:
                final_equity = trades['equity'].iloc[-1]
                initial_equity = trades['equity'].iloc[0] if len(trades) > 0 else 10000
                print(f'–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${final_equity:.2f} (–Ω–∞—á–∞–ª—å–Ω—ã–π: ${initial_equity:.2f})')
        
        # –†–∞–∑–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫
        if 'size_usd' in trades.columns:
            avg_size = trades['size_usd'].mean()
            max_size = trades['size_usd'].max()
            print(f'–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: ${avg_size:.2f}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: ${max_size:.2f}')
            
        # –ö–æ–º–∏—Å—Å–∏–∏
        if 'fees_usd' in trades.columns:
            total_fees = trades['fees_usd'].sum()
            print(f'–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${total_fees:.2f}')
    
    print()
except Exception as e:
    print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ trades.csv: {e}')

# –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
try:
    signals = pd.read_csv('logs/signals.csv')
    print('üì° –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í (signals.csv)')
    print('=' * 50)
    print(f'–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}')
    
    if len(signals) > 0:
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        signals['ts'] = pd.to_datetime(signals['ts'], unit='ms')
        start_time = signals['ts'].min()
        end_time = signals['ts'].max()
        duration = end_time - start_time
        print(f'–ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª–æ–≤: {start_time} - {end_time}')
        print(f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}')
        
        # –°–∏–º–≤–æ–ª—ã
        symbols = signals['symbol'].value_counts()
        print(f'–°–∏–º–≤–æ–ª—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {dict(symbols)}')
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        if 'direction' in signals.columns:
            directions = signals['direction'].value_counts()
            print(f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {dict(directions)}')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ–≤
        if 'score' in signals.columns:
            print(f'–°–∫–æ—Ä - —Å—Ä–µ–¥–Ω–µ–µ: {signals["score"].mean():.2f}, –º–µ–¥–∏–∞–Ω–∞: {signals["score"].median():.2f}')
            print(f'–°–∫–æ—Ä - –º–∏–Ω: {signals["score"].min():.2f}, –º–∞–∫—Å: {signals["score"].max():.2f}')
        
        # –°–ø—Ä–µ–¥—ã
        if 'spread_bps' in signals.columns:
            print(f'–°–ø—Ä–µ–¥ (bps) - —Å—Ä–µ–¥–Ω–µ–µ: {signals["spread_bps"].mean():.2f}, –º–µ–¥–∏–∞–Ω–∞: {signals["spread_bps"].median():.2f}')
        
        # OBI –∞–Ω–∞–ª–∏–∑
        if 'obi' in signals.columns:
            print(f'OBI - —Å—Ä–µ–¥–Ω–µ–µ: {signals["obi"].mean():.3f}, –º–µ–¥–∏–∞–Ω–∞: {signals["obi"].median():.3f}')
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ—è—Å–Ω–∞
        print(f'–ö–æ–ª–æ–Ω–∫–∏ –≤ signals: {list(signals.columns)}')
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_cols = signals.select_dtypes(include=[np.number]).columns
        if len(numeric_cols) > 10:  # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫, –ø–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ
            print(f'–ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–µ—Å—Ç—å {len(numeric_cols)}): {list(numeric_cols[:10])}...')
        
        # –ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_per_minute = len(signals) / (duration.total_seconds() / 60) if duration.total_seconds() > 0 else 0
        print(f'–ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_per_minute:.2f} —Å–∏–≥–Ω–∞–ª–æ–≤/–º–∏–Ω—É—Ç—É')

except Exception as e:
    print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ signals.csv: {e}')

print('\nüèÅ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω')
